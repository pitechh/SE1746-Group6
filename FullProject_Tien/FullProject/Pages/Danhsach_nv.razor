@page "/danhsach_nv"

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService

<PageTitle>Danh sách nhân viên</PageTitle>
<style>
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 210px;
        height: 100vh;
        background: var(--secondary);
        transition: 0.5s;
        z-index: 999;
    }

    .content.px-4 {
        padding-left: 0 !important;
    }

    .bg-secondary {
        background-color: white !important;
    }

    .content .navbar .dropdown-item {
        color: black;
    }

</style>
<HeadContent>
    <link href="css/admin.css" rel="stylesheet" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="custom.js"></script>
    <script src="moment.min.js"></script>
    <script src="waypoints.min.js"></script>
    <script src="js1.js"></script>
    <script src="bt4.js"></script>
</HeadContent>

<div class="container-fluid position-relative d-flex p-0 ">
    <!-- Sidebar Start -->
    <div class="sidebar pe-4 pb-3">
        <nav class="navbar bg-white text-dark navbar-dark">
            <a href="trangchu" class="navbar-brand mx-4 mb-3">
                <h3 class="text-primary"><i class="fa fa-user-edit me-2"></i>HR</h3>
            </a>
            <div class="d-flex align-items-center ms-4 mb-4">
                <div class="position-relative">
                    <img class="rounded-circle" src="css/image/user-image.jpg" alt="" style="width: 40px; height: 40px;">
                    <div class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"></div>
                </div>
                <div class="ms-3">
                    <h6 class="mb-0 text-dark">@AuthService.Username</h6>
                    <span>@AuthService.UserRole</span>
                </div>
            </div>
            <div class="navbar-nav w-100">
                <a href="trangchu" class="nav-item nav-link"><i class="fa fa-tachometer-alt me-2"></i>Trang chủ</a>
                <div class="nav-item dropdown">
                    @if (user_role == "Cap 1" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 6")
                    {
                        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown"><i class="fa fa-table me-2"></i>Bảng công</a>
                        <div class="dropdown-menu bg-transparent border-0 ">
                            <a href="bangcong" class="dropdown-item" id="drop21">Bảng công nhân viên</a>

                            <a href="chamcong" class="dropdown-item" id="drop22">Chấm công nhân viên</a>
                            <a href="thietlap" class="dropdown-item" id="drop22">Thiết lập</a>
                        </div>
                    }
                </div>

                @if (user_role == "Cap 1" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 5")
                {
                    <a href="danhsach_nv" class="nav-item nav-link  active"><i class="fa fa-user-tie me-2"></i>Quản lí nhân sự</a>
                }

                <div class="nav-item dropdown">
                    @if (user_role == "Cap 4" || user_role == "Cap 2" || user_role == "Cap 1")
                    {
                        <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown"><i class="fa fa-money-check me-2"></i>Quản lí lương</a>
                        <div class="dropdown-menu bg-transparent border-0 ">
                            <a href="bangluong" class="dropdown-item" id="drop21">Bảng lương</a>

                            <a href="thuong_phat" class="dropdown-item" id="drop22">Bảng thưởng/phạt</a>
                        </div>
                    }
                </div>
                <div class="navbar-nav w-100">
                    <!-- Get user role -->
                    @if (user_role == "Cap 1")
                    {
                        <a href="captaikhoan" class="nav-item nav-link"><i class="fa fa-id-card me-2"></i>Cấp tài khoản</a>
                    }
                </div>
            </div>
        </nav>
    </div>
    <!-- Sidebar End -->
    <!-- Content Start -->
    <div class="content">
        <!-- Navbar Start -->
        <nav class="navbar navbar-expand bg-secondary navbar-dark sticky-top px-4 py-0 bg-white">
            <a href="admin_dashboard.html" class="navbar-brand d-flex d-lg-none me-4">
                <h2 class="text-primary mb-0"><i class="fa fa-user-edit"></i></h2>
            </a>
            <a class="sidebar-toggler flex-shrink-0">
                <i class="fa fa-bars"></i>
            </a>

            <div class="navbar-nav align-items-center ms-auto">
                @*                 <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fa fa-bell me-lg-2"></i>
                        <span class="d-none d-lg-inline-flex">Notification</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary border-0 rounded-0 rounded-bottom m-0">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Profile updated</h6>
                            <small>15 minutes ago</small>
                        </a>
                        <hr class="dropdown-divider">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Password changed</h6>
                            <small>15 minutes ago</small>
                        </a>
                    </div>
                </div> *@
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <img class="rounded-circle me-lg-2" src="css/image/user-image.jpg" alt="" style="width: 40px; height: 40px;">
                        <span class="d-none d-lg-inline-flex">@AuthService.Username</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary bordesrc="css/image/user-image.jpg"r-0 rounded-0 rounded-bottom m-0">

                        <a href="/" class="dropdown-item">Sign Out</a>
                    </div>
                </div>
            </div>
        </nav>
        <!-- Navbar End -->

        <div class="container-fluid pt-4 px-4 ">
            <div class="text-left rounded p-4 bg-white">
                <b><h3 class="text-dark">Quản lý nhân viên</h3></b>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
            <div class="bg-white text-left rounded p-4">

                <form class="row g-4 needs-validation text-dark" id="formDealer" novalidate>
                    <div class="col-md-4">
                        <label for="validationCustom01" class="form-label">Mã nhân viên</label>
                        <input type="text" class="form-control bg-white" id="validationCustom01" @bind="MaNV" required>
                    </div>
                    <div class="col-md-4">
                        <label for="validationCustom04" class="form-label">Họ tên</label>
                        <input type="text" class="form-control bg-white" id="validationCustom04" @bind="HoTen" required>
                    </div>
                    <div class="col-md-4">
                        <label for="validationCustom02" class="form-label">Chức vụ</label>
                        <select class="form-select bg-white" id="validationCustom02" @bind="ChucVu" required>
                            <option></option>
                            <option>Chủ tịch</option>
                            <option>Giám đốc</option>
                            <option>Phó giám đốc</option>
                            <option>Trưởng phòng</option>
                            <option>Phó phòng</option>
                            <option>Nhân viên</option>
                        </select>
                    </div>
                    <div class="col-md-2"></div>
                    <div class="col-md-4">
                        <label for="validationCustom05" class="form-label">Phòng ban</label>
                        <input type="text" class="form-control bg-white" id="validationCustom05" @bind="PhongBan" required>
                    </div>
                    <div class="col-md-4">
                        <label for="validationCustom07" class="form-label">Trạng thái làm việc</label>
                        <select class="form-select bg-white" id="validationCustom07" @bind="TrangThai" required>
                            <option></option>
                            <option>Đang làm việc</option>
                            <option>Nghỉ việc</option>
                            <option>Nghỉ chế độ</option>
                            <option>Nghỉ phép</option>
                        </select>

                    </div><br>

                    <div class="mb-3 text-center">
                        <button disabled="@IsDisabledSearch" class="btn btn-primary" type="button" @onclick="SearchRecords">@buttonText</button>
                        <button disabled="@IsDisabledThem" class="btn btn-primary" type="button" onclick="window.location.href='/nhap_nv'" style="color:white">Thêm mới</button>
                    </div>

                </form>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4 ">
            <div class="text-center rounded p-4 bg-white">

                <div class="table-responsive text-dark">
                    <table class="table text-center text-dark align-middle table-bordered table-hover mb-0" id="table">
                        <thead>
                            <tr class="text-dark">
                                <th scope="col">Mã NV</th>
                                <th scope="col">Họ tên</th>
                                <th scope="col">Chức vụ</th>
                                <th scope="col">Phòng ban</th>
                                <th scope="col">Mail</th>
                                <th scope="col">Trạng thái</th>
                                <th scope="col">Tác vụ</th>
                                <th scope="col">Chi tiết</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var nvien in nhanVienList)
                            {
                                <tr>
                                    <td>@nvien.MaNV</td>
                                    <td>@nvien.HoTen</td>
                                    <td>@nvien.ChucVu</td>
                                    <td>@nvien.PhongBan</td>
                                    <td>@nvien.MailLamViec</td>
                                    <td>@nvien.TrangThai</td>
                                    <td>
                                        <button id="editButton" type="button" class="btn btn-light" @onclick="() => NavigateToEmployeeDetail(nvien.MaNV)"><i class="fa fa-pen"></i></button>
                                        <span><button type="button" class="btn btn-light" @onclick="() => ConfirmDelete(nvien.MaNV)"><i class="fa fa-trash"></i></button></span>
                                    </td>
                                    <td><i class="fa fa-ellipsis-h" aria-hidden="true" @onclick="(() => NavigateToDetail(nvien.MaNV))"></i></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="col-12 col-sm-3 text-center text-sm-start mx-auto pt-4 px-4">
                        <tfoot>
                            <tr>
                                <td style="margin-left:50px">
                                    <nav aria-label="Page navigation">
                                        <ul class="pagination justify-content-center">

                                            <li class="page-item @(!HasPreviousPage() ? "disabled" : "")">
                                                <button class="page-link" disabled="@(!HasPreviousPage())" @onclick="() => GoToPage(CurrentPage - 1)">Previous</button>
                                            </li>
                                            @if (totalPages <= 5)
                                            {
                                                for (int i = 1; i <= totalPages; i++)
                                                {
                                                    <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                        <i class="page-link">@i</i>
                                                    </li>
                                                }
                                            }
                                            else
                                            {
                                                if (CurrentPage <= 3)
                                                {
                                                    for (int i = 1; i <= 5; i++)
                                                    {
                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                            <i class="page-link ">@i</i>
                                                        </li>
                                                    }
                                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                                else if (CurrentPage >= totalPages - 2)
                                                {
                                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = totalPages - 4; i <= totalPages; i++)
                                                    {
                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                            <i class="page-link">@i</i>
                                                        </li>
                                                    }
                                                }
                                                else
                                                {
                                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                                    for (int i = CurrentPage - 2; i <= CurrentPage + 2; i++)
                                                    {
                                                        <li class="page-item @(IsCurrentPage(i) ? "active" : "")">
                                                            <i class="page-link"> </i>
                                                        </li>
                                                    }
                                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                                }
                                            }
                                            <li class="page-item @(!HasNextPage() ? "disabled" : "")">
                                                <button class="page-link" disabled="@(!HasNextPage())" @onclick="() => GoToPage(CurrentPage + 1)">Next</button>
                                            </li>
                                        </ul>

                                    </nav>
                                </td>
                            </tr>
                        </tfoot>
                    </div>
                </div>
            </div>
        </div>


        <!-- Footer Start -->
        <div class="container-fluid pt-4 px-4 ">
            <div class="bg-secondary rounded-top p-4 bg-white">
                <div class="row ">
                    <div class="col-12 col-sm-6 text-center text-sm-start ">
                        PRN231 - Lecture:Huynh44
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End -->
    </div>
    <!-- Content End -->

</div>
<script>
    function navigateToAddNew() {
        localStorage.setItem("action", "add");
        window.location.href = "/nhap_nv";
    }

    // Lấy đối tượng input MaNV
    var maNVInput = document.getElementById('MaNVinput');

    // Thêm sự kiện "input" để kiểm tra giá trị khi người dùng nhập vào
    maNVInput.addEventListener('input', function (event) {
        var value = event.target.value;

        // Loại bỏ các ký tự không phải số từ giá trị nhập vào
        var newValue = value.replace(/[^\d]/g, '');

        // Giới hạn số lượng ký tự nếu cần
        if (newValue.length > 10) {
            newValue = newValue.slice(0, 10);
        }

        // Cập nhật giá trị mới vào ô input
        event.target.value = newValue;
    });

    function blockUnwantedCharacters(input) {
        var value = input.value;
        var newValue = value.replace(/[0-9*+\-_=?><":;'!.,#$%^&/*()\u0040\u007B\u007D\u005B\u005D\u005C\u007C]/g, '');
        input.value = newValue;
    }

    var hoTenInput = document.getElementById('HoTeninput');
    var phongBanInput = document.getElementById('PhongBaninput');
    //var trangThaiInput = document.getElementById('TrangThaiinput');
    // var chucVuInput = document.getElementById('ChucVuinput');

    hoTenInput.addEventListener('input', function (event) {
        blockUnwantedCharacters(event.target);
    });

    phongBanInput.addEventListener('input', function (event) {
        blockUnwantedCharacters(event.target);
    });

    // trangThaiInput.addEventListener('input', function (event) {
    //     blockUnwantedCharacters(event.target);
    // });

    // chucVuInput.addEventListener('input', function (event) {
    //     blockUnwantedCharacters(event.target);
    // });

</script>

@using Core.Domain.Model;
@using WebAPI.Services;
@using Core.Application.DTOs;
@using static WebAPI.Services.ThietLapService
@inject ThietLapService thietlapservices;

@* @using Microsoft.JSInterop
 *@
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory HttpClientFactory


@code {
    private string user_role = null;
    private bool IsDisabledSearch = false;
    private bool IsDisabledThem = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync called");

        // Kiểm tra xem AuthService có được xác thực không và các thông tin cần thiết có tồn tại không
        if (AuthService.IsAuthenticated && !string.IsNullOrEmpty(AuthService.Username) && !string.IsNullOrEmpty(AuthService.UserRole))
        {
            // Nếu tất cả thông tin cần thiết tồn tại, gán giá trị cho user_role và tiếp tục
            user_role = AuthService.UserRole;
            Console.WriteLine("User role is: " + user_role);
            Console.WriteLine("User is authenticated");
            await LoadData();
        }
        else
        {
            // Nếu có bất kỳ thông tin nào không tồn tại, chuyển hướng về trang chủ
            NavigationManager.NavigateTo("/");
        }
    }

    [Inject] private ThietLapService thietLapService { get; set; }
    public string buttonText = "Tìm kiếm";
    public string MaNV;
    public string HoTen;
    public string ChucVu;
    public string PhongBan;
    public string ChiNhanh;
    public string MailLamViec;
    public string TrangThai;
    public DateTime? NgaySinh;
    public string GioiTinh;
    public string CCCD;
    public string SoDienThoai;
    public string MaBaoHiem;
    public string DiaChiThuongChu;
    public string DiaChiTamChu;
    public string TrinhDoHocVan;
    public string TenNganHang;
    public string STKNganHang;
    public string MaSoThue;
    public string LoaiNhanVien;
    public string MaPhongBan;
    public string MaChiNhanh;
    public string YeuCauChamCong;
    public DateTime BatDauLamViec;
    public DateTime ChinhThucLamViec;
    public DateTime? NgayNghiViec;
    public List<string> DanhSachPhongBan { get; set; }
    public List<string> DanhSachChiNhanh { get; set; }

    List<NhanVienInfo> nhanVienList = new List<NhanVienInfo>();
    //List<NhanVienInfo> nhanVienList2 = new List<NhanVienInfo>();
    List<NhanVienInfo> searchResultList = new List<NhanVienInfo>();


    public int CurrentPage = 1;
    public int PageSize = 15; // Số lượng bản ghi trên mỗi trang
    public int totalRecords;
    public int totalPages;

    private async Task LoadData()
    {
        if (searchResultList.Count == 0)
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            totalRecords = await httpClient.GetFromJsonAsync<int>("api/thietlap/totalrecordsnhanvien");
            // totalRecords = await thietlapservices.GetTotalRecordsNhanVien();
            totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);

            if (totalPages > 0)
            {
                if (CurrentPage < 1) CurrentPage = 1;
                else if (CurrentPage > totalPages) CurrentPage = totalPages;

                int skip = (CurrentPage - 1) * PageSize;
                // nhanVienList = await thietlapservices.GetNhanVienPaged(skip, PageSize);
                nhanVienList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienpaged/{skip}/{PageSize}");
            }
            else
            {
                Console.WriteLine("Không có dữ liệu để hiển thị.");
            }
        }
        else
        {
            totalRecords = searchResultList.Count;
            totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);

            if (totalPages > 0)
            {
                if (CurrentPage < 1) CurrentPage = 1;
                else if (CurrentPage > totalPages) CurrentPage = totalPages;

                int skip = (CurrentPage - 1) * PageSize;
                nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();
            }
            else
            {
                Console.WriteLine("Không có dữ liệu để hiển thị.");
            }
        }

        // // Tính toán số trang và lấy danh sách bản ghi cho trang hiện tại
        // totalRecords = await thietlapservices.GetTotalRecordsNhanVien();
        // totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);

        // // Kiểm tra totalPages để đảm bảo rằng nó lớn hơn 0
        // if (totalPages > 0)
        // {
        //     if (CurrentPage < 1)
        //         CurrentPage = 1;
        //     else if (CurrentPage > totalPages)
        //         CurrentPage = totalPages;

        //     int skip = (CurrentPage - 1) * PageSize;
        //     nhanVienList = await thietlapservices.GetNhanVienPaged(skip, PageSize);
        // }
        // else
        // {
        //     // Xử lý trường hợp totalPages không hợp lệ, ví dụ: thông báo cho người dùng
        //     Console.WriteLine("Không có dữ liệu để hiển thị.");
        // }
    }


    // Các phương thức xử lý sự kiện phân trang
    public async Task GoToPage(int page)
    {
        CurrentPage = page;
        await LoadData();
    }

    public bool IsCurrentPage(int page)
    {
        return page == CurrentPage;
    }

    public bool HasPreviousPage()
    {
        // Kiểm tra nếu có trang trước đó
        return CurrentPage > 1;
    }

    public bool HasNextPage()
    {
        // Kiểm tra nếu có trang tiếp theo
        int totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
        return CurrentPage < totalPages;
    }


    private async Task SearchRecords()
    {
        PageSize = 15;

        if (!string.IsNullOrEmpty(MaNV))
        {
            // Kiểm tra định dạng của MaNV
            if (MaNV.Length > 10)
            {
                await JSRuntime.InvokeVoidAsync("alert", "MaNV không được có nhiều hơn 10 ký tự");
                MaNV = null;

                // Focus vào inputElement
                await JSRuntime.InvokeVoidAsync("FocusInputElement");
                return;
            }

            // Thực hiện tìm kiếm khi MaNV không rỗng
            // searchResultList = await thietlapservices.GetNhanVienByMaNV(MaNV);
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            searchResultList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienbymanv/{MaNV}");

            // Kiểm tra xem danh sách nhanVienList có phần tử nào không
            if (searchResultList != null && searchResultList.Count > 0)
            {
                MaNV = searchResultList[0].MaNV;
                HoTen = searchResultList[0].HoTen;
                ChucVu = searchResultList[0].ChucVu;
                PhongBan = searchResultList[0].PhongBan;
                TrangThai = searchResultList[0].TrangThai;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    IsDisabledThem = true;
                    buttonText = "Hủy Tìm kiếm";
                    //IsDisabledNew = true;
                    totalRecords = searchResultList.Count;
                    totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
                    // Giới hạn danh sách để hiển thị chỉ các bản ghi trên trang hiện tại
                    int skip = (CurrentPage - 1) * PageSize;
                    nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();

                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    // Reset các trường
                    ResetFields();

                    // Load dữ liệu ban đầu
                    await LoadData();

                    buttonText = "Tìm kiếm";
                    //IsDisabledNew = false;
                    IsDisabledThem = false;
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + MaNV);

                // Reset các trường
                ResetFields();

                // Load dữ liệu ban đầu
                await LoadData();
            }
        }

        //HoTen
        else if (!string.IsNullOrEmpty(HoTen))
        {

            // Thực hiện tìm kiếm khi MaNV không rỗng
            // searchResultList = await thietlapservices.GetNhanVienByHoTen(HoTen);

            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            searchResultList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienbyhoten/{HoTen}");


            // Kiểm tra xem danh sách nhanVienList có phần tử nào không
            if (searchResultList != null && searchResultList.Count > 0)
            {
                MaNV = searchResultList[0].MaNV;
                HoTen = searchResultList[0].HoTen;
                ChucVu = searchResultList[0].ChucVu;
                PhongBan = searchResultList[0].PhongBan;
                TrangThai = searchResultList[0].TrangThai;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    IsDisabledThem = true;
                    buttonText = "Hủy Tìm kiếm";
                    //IsDisabledNew = true;

                    totalRecords = searchResultList.Count;
                    totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
                    // Giới hạn danh sách để hiển thị chỉ các bản ghi trên trang hiện tại
                    int skip = (CurrentPage - 1) * PageSize;
                    nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();

                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    IsDisabledThem = false;
                    // Reset các trường
                    ResetFields();

                    // Load dữ liệu ban đầu
                    await LoadData();

                    buttonText = "Tìm kiếm";
                    //IsDisabledNew = false;
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + HoTen);

                // Reset các trường
                ResetFields();

                // Load dữ liệu ban đầu
                await LoadData();
            }
        }


        //ChucVu
        else if (!string.IsNullOrEmpty(ChucVu))
        {

            // Thực hiện tìm kiếm khi MaNV không rỗng
            // searchResultList = await thietlapservices.GetNhanVienByChucVu(ChucVu);

            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            searchResultList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienbychucvu/{ChucVu}");


            // Kiểm tra xem danh sách nhanVienList có phần tử nào không
            if (searchResultList != null && searchResultList.Count > 0)
            {
                MaNV = searchResultList[0].MaNV;
                HoTen = searchResultList[0].HoTen;
                ChucVu = searchResultList[0].ChucVu;
                PhongBan = searchResultList[0].PhongBan;
                TrangThai = searchResultList[0].TrangThai;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    IsDisabledThem = true;
                    buttonText = "Hủy Tìm kiếm";


                    totalRecords = searchResultList.Count;

                    totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
                    // Giới hạn danh sách để hiển thị chỉ các bản ghi trên trang hiện tại
                    int skip = (CurrentPage - 1) * PageSize;
                    nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();

                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    IsDisabledThem = false;
                    // Reset các trường
                    ResetFields();

                    // Load dữ liệu ban đầu
                    await LoadData();

                    buttonText = "Tìm kiếm";
                    //IsDisabledNew = false;
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + ChucVu);

                // Reset các trường
                ResetFields();

                // Load dữ liệu ban đầu
                await LoadData();
            }
        }

        //PhongBan
        else if (!string.IsNullOrEmpty(PhongBan))
        {

            // Thực hiện tìm kiếm khi MaNV không rỗng
            // searchResultList = await thietlapservices.GetNhanVienByPhongBan(PhongBan);

            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            searchResultList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienbyphongban/{PhongBan}");


            // Kiểm tra xem danh sách nhanVienList có phần tử nào không
            if (searchResultList != null && searchResultList.Count > 0)
            {
                MaNV = searchResultList[0].MaNV;
                HoTen = searchResultList[0].HoTen;
                ChucVu = searchResultList[0].ChucVu;
                PhongBan = searchResultList[0].PhongBan;
                TrangThai = searchResultList[0].TrangThai;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    IsDisabledThem = true;
                    buttonText = "Hủy Tìm kiếm";
                    //IsDisabledNew = true;

                    totalRecords = searchResultList.Count;
                    totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
                    // Giới hạn danh sách để hiển thị chỉ các bản ghi trên trang hiện tại
                    int skip = (CurrentPage - 1) * PageSize;
                    nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();
                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    IsDisabledThem = false;
                    // Reset các trường
                    ResetFields();

                    // Load dữ liệu ban đầu
                    await LoadData();

                    buttonText = "Tìm kiếm";
                    //IsDisabledNew = false;
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + PhongBan);

                // Reset các trường
                ResetFields();

                // Load dữ liệu ban đầu
                await LoadData();
            }
        }

        //TrangThai
        else if (!string.IsNullOrEmpty(TrangThai))
        {

            // Thực hiện tìm kiếm khi MaNV không rỗng

            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            searchResultList = await httpClient.GetFromJsonAsync<List<NhanVienInfo>>($"api/thietlap/nhanvienbytrangthai/{TrangThai}");

            // searchResultList = await thietlapservices.GetNhanVienByTrangThai(TrangThai);

            // Kiểm tra xem danh sách nhanVienList có phần tử nào không
            if (searchResultList != null && searchResultList.Count > 0)
            {
                MaNV = searchResultList[0].MaNV;
                HoTen = searchResultList[0].HoTen;
                ChucVu = searchResultList[0].ChucVu;
                PhongBan = searchResultList[0].PhongBan;
                TrangThai = searchResultList[0].TrangThai;

                // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
                if (buttonText == "Tìm kiếm")
                {
                    IsDisabledThem = true;
                    buttonText = "Hủy Tìm kiếm";
                    //IsDisabledNew = true;

                    totalRecords = searchResultList.Count;
                    totalPages = (int)Math.Ceiling(totalRecords / (double)PageSize);
                    // Giới hạn danh sách để hiển thị chỉ các bản ghi trên trang hiện tại
                    int skip = (CurrentPage - 1) * PageSize;
                    nhanVienList = searchResultList.Skip(skip).Take(PageSize).ToList();
                }
                else if (buttonText == "Hủy Tìm kiếm")
                {
                    IsDisabledThem = false;
                    // Reset các trường
                    ResetFields();

                    // Load dữ liệu ban đầu
                    await LoadData();

                    buttonText = "Tìm kiếm";
                    //IsDisabledNew = false;
                }
            }
            else
            {
                await JSRuntime.InvokeAsync<object>("window.alert", "Không tìm thấy " + TrangThai);

                // Reset các trường
                ResetFields();

                // Load dữ liệu ban đầu
                await LoadData();
            }
        }
        else
        {
            // Nếu cả ba trường input đều
        }
    }

    // Phương thức để reset các trường
    private void ResetFields()
    {
        MaNV = "";
        HoTen = "";
        ChucVu = "";
        PhongBan = "";
        TrangThai = "";
        searchResultList.Clear();
        CurrentPage = 1;
        totalRecords = 0;
        totalPages = 0;
        IsDisabledThem = false;
        buttonText = "Tìm kiếm";
    }



    private async Task XoaNhanVien(string MaNV)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
                new[] { "Bạn có chắc chắn muốn xóa không?" });

            if (confirmed)
            {
                var httpClient = HttpClientFactory.CreateClient("ApiClient");
                var response = await httpClient.DeleteAsync($"api/thietlap/nhanvien/{maNV}");

                if (response.IsSuccessStatusCode)
                {
                    await LoadData(); // Refresh the list
                    await JSRuntime.InvokeVoidAsync("alert", "Employee deleted successfully");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error deleting employee");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task GetEmployeeInfo(string maNV)
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var nhanvien = await httpClient.GetFromJsonAsync<NhanVienInfo>($"api/thietlap/nhanvien/{maNV}");

            // var nhanvien = await thietlapservices.GetEmployeeInfo(maNV);
            if (maNV != null)
            {
                HoTen = nhanvien.HoTen;
                NgaySinh = nhanvien.NgaySinh;
                GioiTinh = nhanvien.GioiTinh;
                CCCD = nhanvien.CCCD;
                SoDienThoai = nhanvien.SoDienThoai;
                MaBaoHiem = nhanvien.MaBaoHiem;
                DiaChiThuongChu = nhanvien.DiaChiThuongChu;
                DiaChiTamChu = nhanvien.DiaChiTamChu;
                TrinhDoHocVan = nhanvien.TrinhDoHocVan;
                TenNganHang = nhanvien.TenNganHang;
                STKNganHang = nhanvien.STKNganHang;
                MaSoThue = nhanvien.MaSoThue;
                MaNV = nhanvien.MaNV;
                MailLamViec = nhanvien.MailLamViec;
                LoaiNhanVien = nhanvien.LoaiNhanVien;
                ChucVu = nhanvien.ChucVu;
                PhongBan = nhanvien.PhongBan;
                ChiNhanh = nhanvien.ChiNhanh;
                YeuCauChamCong = nhanvien.YeuCauChamCong;
                BatDauLamViec = nhanvien.NgayBatDauLam;
                ChinhThucLamViec = nhanvien.NgayChinhThucLam;
                NgayNghiViec = nhanvien.NgayNghiViec;
                TrangThai = nhanvien.TrangThai;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi lấy thông tin nhân viên: " + ex.Message);
        }

    }

    private void NavigateToEmployeeDetail(string MaNV)
    {
        NavigationManager.NavigateTo($"/nhap_nv/{MaNV}");
    }

    // Hàm điều hướng đến trang chi tiết nhân viên với mã nhân viên
    private void NavigateToDetail(string MaNV)
    {
        // Sử dụng NavigationManager để điều hướng đến trang chi tiết nhân viên
        NavigationManager.NavigateTo($"/chitiet_nv/{MaNV}");
    }

    public async Task ConfirmDelete(string maNV)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Bạn có chắc chắn muốn xóa không?" });
            if (confirmed)
            {
                await XoaNhanVien(maNV);
                // Sau khi xóa, cập nhật lại danh sách
                // await SearchRecords();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            // Xử lý lỗi nếu có
            Console.WriteLine("Lỗi khi xác nhận xóa nhân viên: " + ex.Message);
            // Hoặc xử lý theo cách khác, ví dụ: hiển thị thông báo lỗi cho người dùng
        }
    }

    private async Task CheckReload()
    {
        if (string.IsNullOrEmpty(MaNV))
        {
            await OnInitializedAsync();

        }
    }
    private string maNV = "your_employee_id_here";
}
