@page "/bangluong"


@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService
@using OfficeOpenXml;
@using System.Data;
@using System.IO;

<PageTitle>Bảng lương</PageTitle>
<style>
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 210px;
        height: 100vh;
        background: var(--secondary);
        transition: 0.5s;
        z-index: 999;
    }

    .content.px-4 {
        padding-left: 0 !important;
    }

    .bg-secondary {
        background-color: white !important;
    }

    .content .navbar .dropdown-item {
        color: black;
    }
</style>
<HeadContent>
    <link href="css/admin.css" rel="stylesheet" />
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="custom.js"></script>
    <script src="moment.min.js"></script>
    <script src="waypoints.min.js"></script>
    <script src="js1.js"></script>
    <script src="bt4.js"></script>
</HeadContent>

<div class="container-fluid position-relative d-flex p-0"
    <!-- Sidebar Start -->
    <div class="sidebar pe-4 pb-3">
        <nav class="navbar bg-white text-dark navbar-dark">
            <a href="trangchu" class="navbar-brand mx-4 mb-3">
                <h3 class="text-primary"><i class="fa fa-user-edit me-2"></i>HR</h3>
            </a>
            <div class="d-flex align-items-center ms-4 mb-4">
                <div class="position-relative">
                    <img class="rounded-circle" src="css/image/user-image.jpg" alt="" style="width: 40px; height: 40px;">
                    <div class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"></div>
                </div>
                <div class="ms-3">
                    <h6 class="mb-0 text-dark">@AuthService.Username</h6>
                    <span>@AuthService.UserRole</span>
                </div>
            </div>
            <div class="navbar-nav w-100">
                <a href="trangchu" class="nav-item nav-link "><i class="fa fa-tachometer-alt me-2"></i>Trang chủ</a>
                <div class="nav-item dropdown">
                    @if (user_role == "Cap 6" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 1")
                    {
                            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown"><i class="fa fa-table me-2"></i>Bảng công</a>
                            <div class="dropdown-menu bg-transparent border-0 ">
                                <a href="bangcong" class="dropdown-item" id="drop21">Bảng công nhân viên</a>

                                <a href="chamcong" class="dropdown-item" id="drop22">Chấm công nhân viên</a>
                                <a href="thietlap" class="dropdown-item" id="drop22">Thiết lập</a>
                            </div>
                    }
                </div>

                @if (user_role == "Cap 5" || user_role == "Cap 3" || user_role == "Cap 2" || user_role == "Cap 1")
                {
                            <a href="danhsach_nv" class="nav-item nav-link "><i class="fa fa-user-tie me-2"></i>Quản lí nhân sự</a>
                }

                <div class="nav-item dropdown">
                    @if (user_role == "Cap 4" || user_role == "Cap 2" || user_role == "Cap 1")
                    {
                            <a class="nav-link dropdown-toggle active" data-bs-toggle="dropdown"><i class="fa fa-money-check me-2"></i>Quản lí lương</a>
                            <div class="dropdown-menu bg-transparent border-0 show">
                                <a href="bangluong" class="dropdown-item active" id="drop21">Bảng lương</a>

                                <a href="thuong_phat" class="dropdown-item" id="drop22">Bảng thưởng/phạt</a>
                            </div>
                    }
                </div>
                <div class="navbar-nav w-100">
                    <!-- Get user role -->
                    @if (user_role == "Cap 1")
                    {
                            <a href="captaikhoan" class="nav-item nav-link"><i class="fa fa-id-card me-2"></i>Cấp tài khoản</a>
                    }
                </div>
            </div>
        </nav>
    </div>
    <!-- Sidebar End -->
    <!-- Content Start -->
    <div class="content">
        <!-- Navbar Start -->
        <nav class="navbar navbar-expand bg-secondary navbar-dark sticky-top px-4 py-0 bg-white">
            <a href="admin_dashboard.html" class="navbar-brand d-flex d-lg-none me-4">
                <h2 class="text-primary mb-0"><i class="fa fa-user-edit"></i></h2>
            </a>
            <a class="sidebar-toggler flex-shrink-0">
                <i class="fa fa-bars"></i>
            </a>

            <div class="navbar-nav align-items-center ms-auto">
@*                 <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="fa fa-bell me-lg-2"></i>
                        <span class="d-none d-lg-inline-flex">Notification</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary border-0 rounded-0 rounded-bottom m-0">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Profile updated</h6>
                            <small>15 minutes ago</small>
                        </a>
                        <hr class="dropdown-divider">
                        <a class="dropdown-item" onclick="">
                            <h6 class="fw-normal mb-0" style="color:black">Password changed</h6>
                            <small>15 minutes ago</small>
                        </a>
                    </div>
                </div> *@
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                        <img class="rounded-circle me-lg-2" src="css/image/user-image.jpg" alt="" style="width: 40px; height: 40px;">
                        <span class="d-none d-lg-inline-flex">@AuthService.Username</span>
                    </a>
                    <div class="dropdown-menu dropdown-menu-end bg-secondary border-0 rounded-0 rounded-bottom m-0">

                        <a href="/" class="dropdown-item">Sign Out</a>
                    </div>
                </div>
            </div>
        </nav>
        <!-- Navbar End -->

        <div class="container-fluid pt-4 px-4 ">
            <div class="text-left rounded p-4 bg-white">
                <b><h3 class="text-dark">Bảng lương</h3></b>
            </div>
        </div>

        <div class="container-fluid pt-4 px-4">
            <div class="bg-white text-left rounded p-4">
                <form class="row g-4 needs-validation text-dark" id="formDealer" novalidate>
                    <div class="col-md-3">
                        <label for="validationCustom01" class="form-label">Mã nhân viên</label>
                        <input type="text" class="form-control bg-white" id="validationCustom01" @oninput="TiepTucTimKiem" style="font-weight: @inputFontWeight; color: @inputColor" disabled="@DisabledInputId" @bind="maNhanVien" @onblur="ChecknLoad" required>
                    </div>
                    <div class="col-md-3">
                        <label for="validationCustom02" class="form-label">mm/yyyy</label>
                        <select class="form-select bg-white" id="validationCustom02" @oninput="TiepTucTimKiem" style="font-weight: @inputFontWeight; color: @inputColor" disabled="@DisabledInputMonth" @bind="thangLinhLuong" @onblur="ChecknLoad" required>
                            <option></option>
                            @foreach (var thag in thagCongList)
                            {
                                <option>@thag.ThangTinhCongThietLap</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="validationCustom03" class="form-label">Lương cứng</label>
                        <input type="decimal" class="form-control bg-white text-dark" id="validationCustom03" @bind="luongCung" required>
                    </div>
                    <div class="col-md-3">
                        <label for="validationCustom04" class="form-label">Thuế</label>
                        <input type="decimal" class="form-control bg-white text-dark" id="validationCustom04" @bind="thue" required>
                    </div>
                    <div class="mb-3 text-center">
                        <button class="btn btn-primary" type="button" disabled="@IsDisabledSearch" @onclick="TimKiem">@buttonText</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledAdd" @onclick="NhapLuong">Nhập liệu</button>
                        <button class="btn btn-primary ms-5" type="button" disabled="@IsDisabledUpdate" @onclick="CapNhatSua">Cập nhật</button>
                        <button class="btn btn-primary ms-5" type="button" @onclick="ExportToExcel">Xuất Excel</button>
                    </div>

                </form>
            </div>
        </div>

        @if (dataTable != null && dataTable.Rows.Count > 0)
        {
            <div class="container-fluid pt-4 px-4 ">
                <div class="text-center rounded p-4 bg-white">
                    <div class="d-flex align-items-center justify-content-between mb-4 bg-white">
                    </div>
                    <div class="table-responsive">
                        <table class="table text-center text-dark align-middle table-bordered table-hover mb-0" id="table">
                            <thead>
                                <tr>
                                    @foreach (DataColumn column in dataTable.Columns)
                                    {
                                        <th>@column.ColumnName</th>
                                    }
                                    <th>Tác vụ</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (DataRow row in GetPagedData())
                                {
                                    if (editingRow == null || !editingRow.Equals(row))
                                    {
                                        <tr>
                                            @foreach (var item in row.ItemArray)
                                            {
                                                <td>@item</td>
                                            }
                                            <td>
                                                <button type="button" id="editButton" class="btn btn-light" disabled="@(!IsDisabledUpdate)" @onclick="() => BamNutSua(row)"><i class="fa fa-pen"></i></button>
                                            </td>
                                        </tr>
                                    }
                                    
                                }
                            </tbody>
                        </table>

                    </div>


                    <div class="mt-3 mb-3 text-center">
                        <div class="">
                            <button class="btn btn-primary" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage <= 1)">Previous</button>

                            @if (totalPages <= 3)
                            {
                                <!-- Hiển thị tất cả các trang nếu tổng số trang ít hơn hoặc bằng 3 -->
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    <button class="btn @(currentPage == i ? "btn-primary" : "btn-light")" >@i</button>
                                }
                            }
                            else
                            {
                                <!-- Hiển thị trang đầu tiên -->
                                @if (currentPage == 1)
                                {
                                    <button class="btn btn-primary" >1</button>
                                }
                                @if (currentPage >= 2)
                                {
                                    <button class="btn btn-light" >1</button>
                                }
                                <!-- Hiển thị dấu ... nếu trang hiện tại lớn hơn hoặc bằng 4 -->
                                @if (currentPage >= 4)
                                {
                                    <button class="btn btn-light" disabled>...</button>
                                }
                                <!-- Hiển thị 3 trang tiếp theo nếu trang hiện tại lớn hơn hoặc bằng 4 -->
                                @for (int i = currentPage >= 4 ? currentPage - 1 : 2; i <= currentPage + 1 && i <= totalPages; i++)
                                {
                                    <button class="btn @(currentPage == i ? "btn-primary" : "btn-light")" >@i</button>
                                }
                                <!-- Hiển thị dấu ... nếu không phải trang cuối cùng -->
                                @if (currentPage + 2 < totalPages)
                                {
                                    <button class="btn btn-light" disabled>...</button>
                                }
                                <!-- Hiển thị trang cuối cùng -->
                                @if (currentPage + 1 != totalPages && currentPage != totalPages)
                                {
                                    <button class="btn btn-light" >@totalPages</button>
                                }
                            }

                            <button class="btn btn-primary" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage >= totalPages)">Next</button>
                        </div>
                    </div>



                </div>
            </div>
        }
        else if (dataTable != null && dataTable.Rows.Count == 0)
        {
            <div class="container-fluid pt-4 px-4 ">
                <div class="text-center rounded p-4 bg-white">
                    <div class="d-flex align-items-center justify-content-between mb-4 bg-white">
                    </div>
                    <div class="table-responsive">
                        <table class="table text-center text-dark align-middle table-bordered table-hover mb-0" id="table">
                            <thead>
                                <tr>
                                    @foreach (DataColumn column in dataTable.Columns)
                                    {
                                        <th>@column.ColumnName</th>
                                    }
                                    <th>Tác vụ</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                        <br/><p class="text-dark"><strong>Không có dữ liệu.</strong></p>

                    </div>




                </div>
            </div>
        }



        <!-- Footer Start -->
        <div class="container-fluid pt-4 px-4 ">
            <div class="bg-secondary rounded-top p-4 bg-white">
                <div class="row ">
                    <div class="col-12 col-sm-6 text-center text-sm-start ">
                                                    PRN231 - Lecture:Huynh44
                    </div>
                </div>
            </div>
        </div>
        <!-- Footer End -->
    </div>
    <!-- Content End -->

</div>

<script>
    window.scrollToTop = function () {
        window.scrollTo(0, 0);
    }

    function logToConsole(message) {
        console.log(message);
    }

    window.JSRuntime = {
        SaveAs: function (fileName, byteBase64) {
            var link = document.createElement('a');
            link.download = fileName;
            link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + byteBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };
</script>




@using Core.Domain.Model;
@using System.Text.Json
@using WebAPI.Services;
@using System.Data.SqlClient
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.JSInterop
@inject ThietLapService thietlapservices;
@inject WebAPI.Data.ThietLapContext thietLapContext
@using Microsoft.EntityFrameworkCore;
@using System.Data
@using Core.Application.DTOs
@using static WebAPI.Services.ThietLapService
@inject ThietLapService thietLapService;
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory


@code {
    private string user_role = null;

    // Biến lưu trnạg thái nút

    private bool IsDisabledSearch = false;
    private bool IsDisabledAdd = false;
    private bool IsDisabledUpdate = true;
    private bool DisabledInputId = false;
    private bool DisabledInputMonth = false;

    private string buttonText = "Tìm kiếm";
    private string inputColor = "black"; 
    private string inputFontWeight = "normal";



    // Lấy danh sách tháng tính công
    List<ThangTinhCongDuocThiepLap> thagCongList = new List<ThangTinhCongDuocThiepLap>();

    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;

    //Hiển thị bảng
    protected override async Task OnInitializedAsync()
    {

        var httpClient = HttpClientFactory.CreateClient ("ApiClient");

        Console.WriteLine("OnInitializedAsync called");
        if (!AuthService.IsAuthenticated || AuthService.Username.Length == 0 || AuthService.Username == null || AuthService.UserRole.Length == 0 || AuthService.UserRole == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            user_role = AuthService.UserRole;
            Console.WriteLine("User role is: ", user_role);
            Console.WriteLine("User is authenticated");
        }

        try {
            var monthsResponse = await httpClient.GetAsync ("api/thietlap/thangtinhcong");

            if ( monthsResponse.IsSuccessStatusCode ) {
                var options = new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    };

                // First try reading as List<string>
                try {
                    var monthStrings = await monthsResponse.Content.ReadFromJsonAsync<List<string>> (options);
                    thagCongList = monthStrings?.Select (m => new ThangTinhCongDuocThiepLap
                        {
                            ThangTinhCongThietLap = m
                        }).ToList () ?? new List<ThangTinhCongDuocThiepLap> ();
                } catch {
                    // If that fails, try reading as List<ThangTinhCongDuocThiepLap>
                    thagCongList = await monthsResponse.Content.ReadFromJsonAsync<List<ThangTinhCongDuocThiepLap>> (options)
                        ?? new List<ThangTinhCongDuocThiepLap> ();
                }
            }

        } catch ( Exception ex ) {
            await JSRuntime.InvokeVoidAsync ("alert", $"Lỗi khi tải dữ liệu: {ex.Message}");
        }

        // await LoadData();

        dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
        totalPages = (int)Math.Ceiling(dataTable.Rows.Count / (double)pageSize);
    }

    private string maNhanVien;
    private string thangLinhLuong;
    private decimal luongCung;
    private decimal thue;
    private DataTable dataTable;
    private DataRow editingRow;



 

    private async Task ExportToExcel()
    {
        var excelData = thietLapService.ExportToExcel(dataTable);
        var fileName = "LuongNhanVien.xlsx";
        await JSRuntime.InvokeVoidAsync("JSRuntime.SaveAs", fileName, Convert.ToBase64String(excelData));
        await JSRuntime.InvokeVoidAsync("alert", "Xuất Excel thành công");
    }


    private async Task TimKiem()
    {
        var httpClient = HttpClientFactory.CreateClient ("ApiClient");
        if (!string.IsNullOrEmpty(maNhanVien) && string.IsNullOrEmpty(thangLinhLuong))     // Tìm theo mã nhân viên
        {
            var tonTaiResponse = await httpClient.GetAsync ($"api/thietlap/kiemtramanhanvien/{maNhanVien}");
            if ( !tonTaiResponse.IsSuccessStatusCode || !await tonTaiResponse.Content.ReadFromJsonAsync<bool> () ) {
                await JSRuntime.InvokeVoidAsync ("alert", "Mã nhân viên không tồn tại");
                return;
            }

            var coLuongResponse = await httpClient.GetAsync ($"api/thietlap/kiemtramanhanviencoluong/{maNhanVien}");
            if ( !coLuongResponse.IsSuccessStatusCode || !await coLuongResponse.Content.ReadFromJsonAsync<bool> () ) {
                await JSRuntime.InvokeVoidAsync ("alert", $"Nhân viên có mã: {maNhanVien} chưa được nhập lương");
                return;
            }

            // Cập nhật bảng theo nội dung tìm kiếm
            dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
            totalPages = (int)Math.Ceiling(dataTable.Rows.Count / (double)pageSize);

            // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
            if (buttonText == "Tìm kiếm")
            {
                buttonText = "Hủy Tìm kiếm";
                IsDisabledAdd = true;
            }
            else if (buttonText == "Hủy Tìm kiếm")
            {
                maNhanVien = "";
                thangLinhLuong = "";
                luongCung = 0;
                thue = 0;

                await OnInitializedAsync();

                IsDisabledAdd = false;
                buttonText = "Tìm kiếm";
            }
        }

        else if (string.IsNullOrEmpty(maNhanVien) && !string.IsNullOrEmpty(thangLinhLuong))     // Tìm theo tháng lĩnh lương
        {
            // Cập nhật bảng theo nội dung tìm kiếm
            dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
            totalPages = (int)Math.Ceiling(dataTable.Rows.Count / (double)pageSize);

            // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
            if (buttonText == "Tìm kiếm")
            {
                buttonText = "Hủy Tìm kiếm";
                IsDisabledAdd = true;
            }
            else if (buttonText == "Hủy Tìm kiếm")
            {
                maNhanVien = "";
                thangLinhLuong = "";
                luongCung = 0;
                thue = 0;

                await OnInitializedAsync();

                IsDisabledAdd = false;
                buttonText = "Tìm kiếm";
            }
        }

        else if (!string.IsNullOrEmpty(maNhanVien) && !string.IsNullOrEmpty(thangLinhLuong))     // Tìm bằng cả mã nhân viên và tháng lĩnh lương
        {
            var tonTaiResponse = await httpClient.GetAsync ($"api/thietlap/kiemtramanhanvien/{maNhanVien}");
            if ( !tonTaiResponse.IsSuccessStatusCode || !await tonTaiResponse.Content.ReadFromJsonAsync<bool> () ) {
                await JSRuntime.InvokeVoidAsync ("alert", "Mã nhân viên không tồn tại");
                return;
            }

            var coLuongResponse = await httpClient.GetAsync ($"api/thietlap/kiemtramanhanviencoluong/{maNhanVien}");
            if ( !coLuongResponse.IsSuccessStatusCode || !await coLuongResponse.Content.ReadFromJsonAsync<bool> () ) {
                await JSRuntime.InvokeVoidAsync ("alert", $"Nhân viên có mã: {maNhanVien} chưa được nhập lương");
                return;
            }

            // Cập nhật bảng theo nội dung tìm kiếm
            dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
            totalPages = (int)Math.Ceiling(dataTable.Rows.Count / (double)pageSize);

            // Sửa nội dung nút để chuyển trạng thái | TÌM KIẾM <=> HỦY TÌM KIẾM |
            if (buttonText == "Tìm kiếm")
            {
                buttonText = "Hủy Tìm kiếm";
                IsDisabledAdd = true;
            }
            else if (buttonText == "Hủy Tìm kiếm")
            {
                maNhanVien = "";
                thangLinhLuong = "";
                luongCung = 0;
                thue = 0;

                await OnInitializedAsync();

                IsDisabledAdd = false;
                buttonText = "Tìm kiếm";
            }
        }

        else if (string.IsNullOrEmpty(maNhanVien) && string.IsNullOrEmpty(thangLinhLuong))     // Yêu cầu nhập đủ thông tin để tìm kiếm
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập thông tin tìm kiếm");
            dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
            return;
        }
        else
        {
            dataTable = await thietLapContext.GetLuongAsync(maNhanVien, thangLinhLuong);
        }
    }

    private async Task TiepTucTimKiem()
    {
        if (buttonText == "Hủy Tìm kiếm")
        {
            buttonText = "Tìm kiếm";
            IsDisabledAdd = false;
        }
    }

    private async Task ChecknLoad()
    {
        if (string.IsNullOrEmpty(maNhanVien))
        {
            await OnInitializedAsync();
        }
    }

    // Nhập lương
    private async Task NhapLuong()
    {
        if (string.IsNullOrWhiteSpace(maNhanVien) || string.IsNullOrWhiteSpace(thangLinhLuong) || luongCung == 0 || thue == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ thông tin.");
            return;
        }

        if (luongCung.GetType() != typeof(decimal))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Lương nhập sai kiểu dữ liệu");
            return;
        }
        if (thue.GetType() != typeof(decimal))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Thuế nhập sai kiểu dữ liệu");
            return;
        }

        if (luongCung < 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Lương phải lớn hơn 0");
            return;
        }
        if (thue < 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Thuế phải lớn hơn 0");
            return;
        }

        var httpClient = HttpClientFactory.CreateClient ("ApiClient");

        // 1. Check if employee exists
        var tonTaiResponse = await httpClient.GetAsync ($"api/thietlap/kiemtramanhanvien/{maNhanVien}");
        if ( !tonTaiResponse.IsSuccessStatusCode || !await tonTaiResponse.Content.ReadFromJsonAsync<bool> () ) {
            await JSRuntime.InvokeVoidAsync ("alert", "Mã nhân viên không tồn tại");
            return;
        }

        // 2. Check if salary already exists for this month
        var luongResponse = await httpClient.GetAsync ($"api/thietlap/kiemtraluongthang/{maNhanVien}/{thangLinhLuong}");
        if ( luongResponse.IsSuccessStatusCode && await luongResponse.Content.ReadFromJsonAsync<bool> () ) {
            await JSRuntime.InvokeVoidAsync ("alert", $"Nhân viên {maNhanVien} đã có lương tháng {thangLinhLuong}");
            return;
        }

        var luongData = new
        {
            MaNV = maNhanVien,
            ThangLinhLuong = thangLinhLuong,
            LuongCung = luongCung,
            Thue = thue
        };

        var addResponse = await httpClient.PostAsJsonAsync ("api/thietlap/luong", luongData);

        await JSRuntime.InvokeVoidAsync("alert", "Thêm thành công");

        maNhanVien = "";
        thangLinhLuong = "";
        luongCung = 0;
        thue = 0;

        await OnInitializedAsync();
    }

    // Sửa dữ liệu
    private async Task BamNutSua(DataRow row)
    {
        if (buttonText == "Hủy Tìm kiếm")
        {
            buttonText = "Tìm kiếm";
            inputColor = "#ff8000";
        }

        // Gán giá trị của mục thưởng/phạt vào các trường trên form
        maNhanVien = row["MaNV"].ToString();
        thangLinhLuong = row["ThangLinhLuong"].ToString();
        luongCung = Convert.ToDecimal(row["LuongCung"]);
        thue = Convert.ToDecimal(row["Thue"]);

        editingRow = row;

        IsDisabledAdd = true;
        IsDisabledSearch = true;
        IsDisabledUpdate = false;

        DisabledInputId = true;
        DisabledInputMonth = true;
        inputColor = "#ff8000";
        inputFontWeight = "bold";

        // Cuộn lên đầu trang
        JSRuntime.InvokeVoidAsync("scrollToTop");

    }

    // Bổ sung hàm CapNhatSua để cập nhật dữ liệu sau khi sửa
    private async Task CapNhatSua()
    {
        if (string.IsNullOrWhiteSpace(maNhanVien) || string.IsNullOrWhiteSpace(thangLinhLuong) || luongCung == 0 || thue == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ thông tin.");
            return;
        }

        if (luongCung.GetType() != typeof(decimal))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Lương nhập sai kiểu dữ liệu");
            return;
        }
        if (thue.GetType() != typeof(decimal))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Thuế nhập sai kiểu dữ liệu");
            return;
        }

        if (luongCung <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Lương phải lớn hơn 0");
            return;
        }
        if (thue <= 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Thuế phải lớn hơn 0");
            return;
        }

        var httpClient = HttpClientFactory.CreateClient ("ApiClient");

        // Prepare update data
        var updateData = new
        {
            MaNV = maNhanVien,
            ThangLinhLuong = thangLinhLuong,
            LuongCung = luongCung,
            Thue = thue
        };

        // Make API call
        var response = await httpClient.PutAsJsonAsync ("api/thietlap/luong", updateData);

        await JSRuntime.InvokeVoidAsync("alert", "Cập nhật thành công");

        editingRow = null;

        // Xóa các giá trị đã nhập trên form để chuẩn bị cho việc nhập mới
        maNhanVien = "";
        thangLinhLuong = "";
        luongCung = 0;
        thue = 0;

        IsDisabledAdd = false;
        IsDisabledSearch = false;
        IsDisabledUpdate = true;

        DisabledInputId = false;
        DisabledInputMonth = false;
        inputColor = "black";
        inputFontWeight = "normal";

        // Cập nhật lại danh sách 
        await OnInitializedAsync();
    }








    private IEnumerable<DataRow> GetPagedData()
    {
        return dataTable.Rows.Cast<DataRow>().Skip((currentPage - 1) * pageSize).Take(pageSize);

        // var pagedRows = dataTable.Rows.Cast<DataRow>().Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        // int missingRows = pageSize - pagedRows.Count;

        // // Thêm các hàng trống nếu số hàng hiện tại ít hơn pageSize
        // for (int i = 0; i < missingRows; i++)
        // {
        //     var emptyRow = dataTable.NewRow();
        //     pagedRows.Add(emptyRow);
        // }

        // return pagedRows;
    }

    private void GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
    }
}
